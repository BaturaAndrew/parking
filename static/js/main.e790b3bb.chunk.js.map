{"version":3,"sources":["App.js","actions/carActions.js","constants/constants.js","store.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["App","onChange","curState","setState","prevState","car","isValidForm","form","current","getFieldsValue","undefined","car_brand","car_model","car_tenant","handleSearch","selectedKeys","confirm","dataIndex","searchText","searchedColumn","handleReset","clearFilters","addNewCar","state","newCar","car_number","dispatch","props","cb","axios","method","url","data","then","res","type","isCarAdded","error","failAdded","addCar","notification","setModalVisible","status","message","success","React","createRef","modalVisible","this","get","cars","isCarLoading","columns","title","key","render","brand","name","color","model","sorter","a","b","sortDirections","id","filterDropdown","setSelectedKeys","ref","node","searchInput","placeholder","value","e","target","onPressEnter","style","width","marginBottom","display","onClick","icon","SearchOutlined","size","filterIcon","filtered","onFilter","record","toString","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","text","highlightStyle","backgroundColor","padding","searchWords","autoEscape","textToHighlight","top","onOk","onCancel","okButtonProps","cancelButtonProps","layout","Item","label","rules","required","className","htmlType","ArrowLeftOutlined","SendOutlined","scroll","y","border","dataSource","rowKey","pagination","pageSizeOptions","showSizeChanger","Component","connect","store","defaultProps","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunkMiddleware","logger","enhancer","applyMiddleware","createStore","action","Boolean","location","hostname","match","defaults","baseURL","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e790b3bb.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport * as PropTypes from 'prop-types';\nimport {Table, Tag, Button, Modal, Form, Input, Space, message} from 'antd';\nimport {\n  SendOutlined,\n  SearchOutlined,\n  ArrowLeftOutlined,\n} from '@ant-design/icons';\nimport Highlighter from 'react-highlight-words';\nimport {getAllCars, addCar} from './actions/carActions';\nimport './App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.form = React.createRef();\n    this.state = {\n      modalVisible: false,\n      searchText: '',\n      searchedColumn: '',\n    };\n  }\n\n  componentDidMount() {\n    const {dispatch} = this.props;\n    dispatch(getAllCars());\n  }\n\n  onChange = curState => {\n    this.setState(prevState => ({\n      ...prevState,\n      car: {...prevState.car, ...curState},\n    }));\n  };\n\n  setModalVisible(modalVisible) {\n    this.setState({modalVisible});\n  }\n\n  isValidForm = () => {\n    const car = this.form.current.getFieldsValue();\n    if (\n      car.car_brand === undefined ||\n      car.car_model === undefined ||\n      car.car_tenant === undefined\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({searchText: ''});\n  };\n\n  addNewCar = () => {\n    if (!this.isValidForm()) return;\n    const {car} = this.state;\n    const newCar = {\n      car_number: car.car_number,\n      car_brand: car.car_brand,\n      car_model: car.car_model,\n      car_tenant: car.car_tenant,\n    };\n\n    // TODO: implement a function for adding a new car\n    const {dispatch} = this.props;\n    dispatch(addCar(newCar, this.notification));\n    this.setModalVisible(false);\n  };\n\n  notification = status => {\n    if (status.status === 200) {\n      message.success(`${status.message}`);\n    } else {\n      message.error(`${status.message}`);\n    }\n  };\n\n  render() {\n    const columns = [\n      // {\n      //   title: 'Id',\n      //   dataIndex: 'id',\n      //   key: 'id',\n      //   width: 100,\n      // },\n      {\n        title: 'Бренд',\n        dataIndex: 'car_brand',\n        key: 'car_brand',\n        render: brand => (\n          <div>\n            {(brand && `${brand.name}`) || <Tag color=\"red\">не заполнено</Tag>}\n          </div>\n        ),\n      },\n      {\n        title: 'Модель',\n        dataIndex: 'car_model',\n        key: 'car_model',\n        render: model => (\n          <div>\n            {(model && `${model.name}`) || <Tag color=\"red\">не заполнено</Tag>}\n          </div>\n        ),\n      },\n      {\n        title: 'Номер',\n        dataIndex: 'car_number',\n        key: 'car_number',\n        sorter: (a, b) => a.car_number < b.car_number,\n        sortDirections: ['descend', 'ascend'],\n      },\n      {\n        title: 'Арендатор',\n        dataIndex: 'car_tenant',\n        key: 'car_tenant',\n\n        sorter: (a, b) => a.car_tenant.id - b.car_tenant.id,\n        sortDirections: ['descend', 'ascend'],\n        // FIXME: delete this filter\n        filterDropdown: ({\n          setSelectedKeys,\n          selectedKeys,\n          confirm,\n          clearFilters,\n        }) => (\n          <div>\n            <Input\n              ref={node => {\n                this.searchInput = node;\n              }}\n              placeholder={`Search ${'car_tenant'}`}\n              value={selectedKeys[0]}\n              onChange={e =>\n                setSelectedKeys(e.target.value ? [e.target.value] : [])\n              }\n              onPressEnter={() =>\n                this.handleSearch(selectedKeys, confirm, 'car_tenant')\n              }\n              style={{width: 188, marginBottom: 8, display: 'block'}}\n            />\n            <Space>\n              <Button\n                type=\"primary\"\n                onClick={() =>\n                  this.handleSearch(selectedKeys, confirm, 'car_tenant')\n                }\n                icon={<SearchOutlined />}\n                size=\"small\"\n                style={{width: 90}}>\n                Search\n              </Button>\n              <Button\n                onClick={() => this.handleReset(clearFilters)}\n                size=\"small\"\n                style={{width: 90}}>\n                Reset\n              </Button>\n            </Space>\n          </div>\n        ),\n\n        filterIcon: filtered => (\n          <SearchOutlined style={{color: filtered ? '#1890ff' : undefined}} />\n        ),\n\n        onFilter: (value, record) =>\n          record.car_tenant.name.toString().includes(value),\n\n        onFilterDropdownVisibleChange: visible => {\n          if (visible) {\n            setTimeout(() => this.searchInput.select());\n          }\n        },\n        render: text =>\n          this.state.searchedColumn === 'car_tenant' ? (\n            <Highlighter\n              highlightStyle={{backgroundColor: '#ffc069', padding: 0}}\n              searchWords={[this.state.searchText]}\n              autoEscape\n              textToHighlight={text && `${text.name}`}\n            />\n          ) : (\n            <div>\n              {(text && `${text.name}`) || <Tag color=\"red\">не заполнено</Tag>}\n            </div>\n          ),\n      },\n    ];\n    const {cars} = this.props;\n    return (\n      <div>\n        <Button type=\"primary\" onClick={() => this.setModalVisible(true)}>\n          Добавить машину\n        </Button>\n        <Modal\n          title=\"Добавление машины\"\n          style={{top: 20}}\n          visible={this.state.modalVisible}\n          onOk={() => this.setModalVisible(false)}\n          onCancel={() => this.setModalVisible(false)}\n          okButtonProps={{style: {display: 'none'}}}\n          cancelButtonProps={{style: {display: 'none'}}}>\n          {/* TODO: add id for each field */}\n          <Form ref={this.form} layout=\"vertical\" name=\"nest-messages\">\n            <Form.Item\n              name=\"car_number\"\n              label=\"Номер авто\"\n              rules={[\n                {required: true, message: 'Пожалуйста, введите номер авто!'},\n              ]}>\n              <Input\n                placeholder=\"AA 2099-7\"\n                onChange={e => this.onChange({car_number: e.target.value})}\n              />\n            </Form.Item>\n\n            <Form.Item\n              name=\"car_brand\"\n              label=\"Бренда авто (id)\"\n              rules={[\n                {required: true, message: 'Пожалуйста, введите бренда авто!'},\n              ]}>\n              <Input\n                placeholder=\"134 (ГАЗ)\"\n                onChange={e => this.onChange({car_brand: e.target.value})}\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"car_model\"\n              label=\"Модель авто (id)\"\n              rules={[\n                {required: true, message: 'Пожалуйста, введите модель авто!'},\n              ]}>\n              <Input\n                placeholder=\"1878 (33023)\"\n                onChange={e => this.onChange({car_model: e.target.value})}\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"car_tenant\"\n              label=\"Арендатор (id)\"\n              rules={[\n                {required: true, message: 'Пожалуйста, введите арендатора!'},\n              ]}>\n              <Input\n                placeholder=\"7 (Альфа-Банк ЗАО)\"\n                onChange={e => this.onChange({car_tenant: e.target.value})}\n              />\n            </Form.Item>\n\n            <div className=\"button-block flex-row\">\n              <Form.Item>\n                <Button\n                  className=\"back-btn\"\n                  type=\"primary\"\n                  htmlType=\"button\"\n                  onClick={() => this.setModalVisible(false)}\n                  icon={<ArrowLeftOutlined />}>\n                  Закрыть форму\n                </Button>\n              </Form.Item>\n              <Form.Item>\n                <Button\n                  className=\"send-btn\"\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  onClick={this.addNewCar}\n                  icon={<SendOutlined />}>\n                  Добавить\n                </Button>\n              </Form.Item>\n            </div>\n          </Form>\n        </Modal>\n        <Table\n          scroll={{y: 570}}\n          style={{border: '1px solid #d7d4d4'}}\n          dataSource={cars}\n          columns={columns}\n          rowKey={record => record.id}\n          pagination={{\n            pageSizeOptions: ['10', '25', '40', '50', '100'],\n            showSizeChanger: true,\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = store => ({cars: store.cars});\n\nexport default connect(mapStateToProps)(App);\nApp.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  cars: PropTypes.arrayOf(PropTypes.object),\n};\n\nApp.defaultProps = {\n  cars: [],\n};\n","import axios from 'axios';\nimport {RECIEVE_ALL_CARS, ADD_NEW_CAR} from '../constants/constants';\n\nconst receiveCars = cars => ({\n  type: RECIEVE_ALL_CARS,\n  cars,\n  isCarLoading: false,\n});\n\nconst addNewCar = car => ({\n  type: ADD_NEW_CAR,\n  car,\n  isCarAdded: true,\n});\nconst failAdded = error => ({\n  type: ADD_NEW_CAR,\n  error,\n  isCarAdded: false,\n});\n\nconst getAllCars = () => dispatch => {\n  axios.get('api/cars').then(res => dispatch(receiveCars(res.data)));\n};\n\nconst addCar = (car, cb) => dispatch => {\n  axios({\n    method: 'post',\n    url: '/api/cars/add/',\n    data: {...car},\n  })\n    // axios.post('api/cars/add', car)\n    .then(\n      res => {\n        dispatch(addNewCar(res.data));\n        cb(res);\n      },\n      error => {\n        dispatch(failAdded(error));\n        cb(error);\n      }\n    );\n};\nexport {receiveCars, addNewCar, getAllCars, addCar};\n","const RECIEVE_ALL_CARS = 'RECIEVE_ALL_CARS';\nconst ADD_NEW_CAR = 'ADD_NEW_CAR';\n\nexport {RECIEVE_ALL_CARS, ADD_NEW_CAR};\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\nimport reducer from './reducers/reducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst middlewares = [thunkMiddleware, logger];\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\nconst store = createStore(reducer, enhancer);\n\nexport default store;\n","import {RECIEVE_ALL_CARS, ADD_NEW_CAR} from '../constants/constants';\n\nexport default function cars(state = {}, action) {\n  switch (action.type) {\n    case RECIEVE_ALL_CARS: {\n      return {\n        ...state,\n        cars: action.cars,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\nimport './index.scss'; // more priority\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_HOST;\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}